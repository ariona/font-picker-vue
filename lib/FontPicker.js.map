{"version":3,"file":"FontPicker.js","sources":["../src/FontPicker.vue"],"sourcesContent":["<template>\n\t<div :id=\"`font-picker${pickerSuffix}`\" class=\"font-picker\" :title=\"state.errorText\">\n\t\t<button class=\"dropdown-button\" type=\"button\"\n\t\t\t\t:class=\"{'expanded': state.expanded}\"\n\t\t\t\t@click=\"toggleExpanded\"\n\t\t\t\t@keypress=\"toggleExpanded\">\n\t\t\t<p class=\"dropdown-font-name\">{{state.activeFont}}</p>\n\t\t\t<p class=\"dropdown-icon\" :class=\"state.loadingStatus\"></p>\n\t\t</button>\n        <div\n            class=\"font-picker-list\"\n            :class=\"{expanded: state.expanded}\">\n            <div class=\"font-filter\">\n                <input type=\"text\" v-model=\"query\" @keyup=\"onScroll\" :placeholder=\"options.searchPlaceholder || 'Search Font'\">\n            </div>\n    \t\t<ul v-if=\"state.loadingStatus === 'finished' && fontManager.fonts\"\n    \t\t\t@scroll=\"onScroll\">\n    \t\t\t<li v-for=\"font in fontList\" :key=\"font.family\">\n    \t\t\t\t<button type=\"button\" class=\"font-abeezee\"\n\t\t\t\t\t\t:class=\"`font-${snakeCase(font.family)}${pickerSuffix} ${font.family === state.activeFont ? 'active-font' : ''}`\"\n\t\t\t\t\t\t@click=\"itemClick(font)\"\n\t\t\t\t\t\t@keypress=\"itemClick(font)\">{{font.family}}</button>\n    \t\t\t</li>\n    \t\t</ul>\n        </div>\n\t</div>\n</template>\n\n<script>\n    import { FontManager } from 'font-picker';\n\n    /**\n     * Vue interface for the font picker\n     * @prop {string} apiKey (required) - Google API key\n     * @prop {string} activeFont - Font that should be selected in the font picker and applied to the\n     * text (default: 'Open Sans'). Must be stored in component state, and be updated using an onChange\n     * listener. See README.md for an example.\n     * @prop {Object} options - Object with additional (optional) parameters:\n     *   @prop {string} name - If you have multiple font pickers on your site, you need to give them\n     *   unique names (which may only consist of letters and digits). These names must also be appended\n     *   to the font picker's ID and the .apply-font class name.\n     *   Example: If { name: 'main' }, use #font-picker-main and .apply-font-main\n     *   @prop {string[]} families - If only specific fonts shall appear in the list, specify their\n     *   names in an array\n     *   @prop {string[]} categories - Array of font categories\n     *   Possible values: 'sans-serif', 'serif', 'display', 'handwriting', 'monospace' (default: all\n     *   categories)\n     *   @prop {string[]} variants - Array of variants which the fonts must include and which will be\n     *   downloaded; the first variant in the array will become the default variant (and will be used\n     *   in the font picker and the .apply-font class)\n     *   Example: ['regular', 'italic', '700', '700italic'] (default: ['regular'])\n     *   @prop {number} limit - Maximum number of fonts to be displayed in the list (the least popular\n     *   fonts will be omitted; default: 100)\n     *   @prop {string} sort - Sorting attribute for the font list\n     *   Possible values: 'alphabetical' (default), 'popularity'\n     * @prop {function} onChange - Function which is executed whenever the user changes the active font\n     * and its stylesheet finishes downloading\n     */\n    export default {\n        props: ['activeFont', 'apiKey', 'options'],\n        name: 'font-picker',\n        data() {\n            return {\n                state: {\n                    activeFont: this.activeFont,\n                    errorText: '',\n                    expanded: false,\n                    loadingStatus: 'loading' // possible values: 'loading', 'finished', 'error'\n                },\n                pickerSuffix: '',\n                fontManager: null,\n                query: '',\n            };\n        },\n\n        computed: {\n            fontList() {\n                return this.fontManager.fonts.filter( item => {\n                    return item.family.toLowerCase().indexOf( this.query.toLowerCase() ) !== -1\n                } )\n            }\n        },\n\n        mounted() {\n\n            document.addEventListener( 'click', (event)=>{\n                if ( ! event.target.closest( '.font-picker' ) && this.state.expanded )\n                    this.toggleExpanded();\n            } )\n            // Determine selector suffix from font picker's name\n            if (this.options && this.options.name) {\n                this.pickerSuffix = `-${this.options.name}`;\n            } else {\n                this.pickerSuffix = '';\n            }\n\n            // Initialize FontManager object and generate the font list\n            this.fontManager = new FontManager(\n                this.apiKey,\n                this.activeFont,\n                this.options\n            );\n\n            this.fontManager.init()\n                .then(() => {\n                    // font list has finished loading\n                    this.setState({\n                        errorText: '',\n                        loadingStatus: 'finished'\n                    });\n                    \n                })\n                .catch((err) => {\n                    // error while loading font list\n                    this.setState({\n                        errorText: 'Error trying to fetch the list of available fonts',\n                        loadingStatus: 'error'\n                    });\n                    console.error(this.state.errorText);\n                    console.error(err);\n                });\n        },\n\n        watch: {\n            activeFont() {\n                if (this.state.activeFont !== this.activeFont) {\n                    this.setActiveFont(this.activeFont);\n                }\n            },\n        },\n\n        methods: {\n            /**\n             * Set state object\n             */\n            setState(state) {\n                this.state = Object.assign(this.state, state);\n            },\n\n            /**\n             * EventListener for closing the font picker when clicking anywhere outside it\n             */\n            onClose(e) {\n                let targetElement = e.target; // clicked element\n\n                do {\n                    if (targetElement === document.getElementById('font-picker')) {\n                        // click inside font picker\n                        return;\n                    }\n                    // move up the DOM\n                    targetElement = targetElement.parentNode;\n                } while (targetElement);\n\n                // click outside font picker\n                this.toggleExpanded();\n            },\n\n            /**\n             * Download the font previews for all visible font entries and the five after them\n             */\n            onScroll(e) {\n                const elementHeight = e.target.scrollHeight / this.fontManager.fonts.length;\n                const downloadIndex = Math.ceil((e.target.scrollTop + e.target.clientHeight) / elementHeight);\n                this.fontManager.downloadPreviews(downloadIndex + 5);\n            },\n\n            /**\n             * Set the font with the given font list index as the active one\n             */\n            setActiveFont(fontFamily) {\n                const activeFontIndex = this.fontManager.setActiveFont(fontFamily);\n                if (activeFontIndex === -1) {\n                    // error trying to change font\n                    this.setState({\n                        activeFont: fontFamily,\n                        errorText: `Cannot update activeFont: The font \"${fontFamily}\" is not in the font list`,\n                        loadingStatus: 'error'\n                    });\n                    console.error(this.state.errorText);\n                } else {\n                    // font change successful\n                    this.setState({\n                        activeFont: fontFamily,\n                        errorText: '',\n                        loadingStatus: 'finished'\n                    });\n                }\n            },\n\n            /**\n             * Expand/collapse the picker's font list\n             */\n            toggleExpanded() {\n                this.setState({\n                    expanded: !this.state.expanded\n                });\n            },\n\n\t\t\tsnakeCase(text) {\n                return text.replace(/\\s+/g, '-').toLowerCase();\n\t\t\t},\n\n            itemClick(font) {\n                this.toggleExpanded();\n                this.$emit('change', font);\n            }\n        },\n    }\n</script>\n\n<style lang=\"less\">\n\t.font-picker {\n        position   : relative;\n        display    : inline-block;\n        width      : 200px;\n        box-shadow : 1px 1px 3px rgba(0, 0, 0, 0.2);\n\n\t\t* {\n\t\t\tbox-sizing: border-box;\n\t\t}\n\n        .font-filter {\n            padding: 10px;\n            input {\n                width: 100%;\n                border: 1px solid #e3e3e3;\n                padding: 5px 10px;\n                font-size: inherit;\n                border-radius: 3px;\n            }\n        }\n\n\t\tp {\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t}\n\n\t\tbutton {\n\t\t\tbackground: transparent;\n\t\t\tborder: 0;\n\t\t\tcolor: inherit;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: inherit;\n\t\t\toutline: none;\n\t\t}\n\n\t\t.dropdown-button {\n\t\t\theight: 35px;\n\t\t\twidth: 100%;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: space-between;\n\t\t\tpadding: 0 10px;\n\t\t\tbackground: #fbfbfb;\n\n\t\t\t&:hover, &.expanded, &:focus {\n\t\t\t\tbackground: #fbfbfb;\n\t\t\t}\n\n\t\t\t.dropdown-font-name {\n\t\t\t\toverflow: hidden;\n\t\t\t\twhite-space: nowrap;\n\t\t\t}\n\n\t\t\t&.expanded .dropdown-icon.finished:before {\n\t\t\t\t-webkit-transform: rotate(-180deg);\n\t\t\t\ttransform: rotate(-180deg);\n\t\t\t}\n\t\t}\n\n\t\t.dropdown-icon {\n\t\t\tmargin-left: 10px;\n\n\t\t\t&.loading:before {\n\t\t\t\tcontent: '';\n\t\t\t\tdisplay: block;\n\t\t\t\theight: 10px;\n\t\t\t\twidth: 10px;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tborder: 2px solid #b2b2b2;\n\t\t\t\tborder-top-color: black;\n\t\t\t\t-webkit-animation: spinner 0.6s linear infinite;\n\t\t\t\tanimation: spinner 0.6s linear infinite;\n\t\t\t}\n\n\t\t\t&.finished:before {\n\t\t\t\tcontent: '';\n\t\t\t\tdisplay: block;\n\t\t\t\theight: 0;\n\t\t\t\twidth: 0;\n\t\t\t\tborder-left: 5px solid transparent;\n\t\t\t\tborder-right: 5px solid transparent;\n\t\t\t\tborder-top: 6px solid black;\n\t\t\t\ttransition: -webkit-transform 0.3s;\n\t\t\t\ttransition: transform 0.3s, -webkit-transform 0.3s;\n\t\t\t\tmargin: 0 2px;\n\t\t\t}\n\n\t\t\t&.error:before {\n\t\t\t\tcontent: '⚠';\n\t\t\t}\n\t\t}\n\n\t\t.font-picker-list {\n\t\t\tposition: absolute;\n\t\t\tz-index: 1;\n\t\t\tmax-height: 0;\n\t\t\twidth: 100%;\n\t\t\toverflow-x: hidden;\n\t\t\toverflow-y: auto;\n\t\t\t-webkit-overflow-scrolling: touch;\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tbackground: #fbfbfb;\n\t\t\tbox-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);\n\t\t\ttransition: 0.3s;\n\n\t\t\t&.expanded {\n\t\t\t\tmax-height: 300px;\n\t\t\t}\n\n            ul {\n                list-style: none;\n                height: 200px!important;\n                max-height: 200px!important;\n                overflow: auto;\n                position: static!important;\n            }\n\n\t\t\tli {\n\t\t\t\theight: 35px;\n\t\t\t\tlist-style: none;\n\n\t\t\t\tbutton {\n\t\t\t\t\theight: 100%;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tpadding: 0 10px;\n\t\t\t\t\twhite-space: nowrap;\n\n\t\t\t\t\t&:hover, &:focus {\n\t\t\t\t\t\tbackground: #dddddd;\n\t\t\t\t\t}\n\n\t\t\t\t\t&.active-font {\n\t\t\t\t\t\tbackground: #d1d1d1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@-webkit-keyframes spinner {\n\t\tto {\n\t\t\t-webkit-transform: rotate(360deg);\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\n\t@keyframes spinner {\n\t\tto {\n\t\t\t-webkit-transform: rotate(360deg);\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}